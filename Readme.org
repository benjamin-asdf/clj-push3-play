#+TITLE: clj-push3-play
#+AUTHOR: Benjamin Schwerdtner
#+OPTIONS: toc:2 num:nil

Another Clojure implementation of the [[https://faculty.hampshire.edu/lspector/push3-description.html][push3]] programming language.

Push is a simple, stack based language designed as the target domain for program synthesis tasks.

* Clojush

Clojush, an implementation of Push/PushGP in Clojure that has been used for many research projects since 2010. Clojush is full-featured but has accumulated technical debt and is nontrivial to understand or modify: http://github.com/lspector/Clojush

* clj-push3-play

- Heavily reuse Clojush source code.
- Be slightly more data oriented.

** Other work

- [[https://github.com/lspector/propeller][propeller]]

** Interpreter

Preliminary interface:

#+BEGIN_SRC clojure
(require '[benjamin-schwerdtner.clj-push3-play.interpreter :as push])

(defn execute [program]
  (push/execute
   (push/setup-state)
   program
   {:max-executions 250}))


(->
 (execute '(2 2 exec_y (integer_dup integer_*)))
 :stacks :push/integer)

[2 10000000000]
#+END_SRC

** Examples

- usage example with random code: [[file:examples/gen.clj][gen]]
- working on it

* Hyperdimensional Computing (HDC) implementation

** Why HDC

Introduce a neurosymbolic paradigm,

*** Pros:
- high biological plausibility,
- a computing paradigm that makes sense in the light of neuronal ensembles.
- proven interesting / promising across cognitive modeling, analogical reasoning applications.
- potential algorithmic layer for emerging neuromorphic hardware.

*** Drawbacks:
- straightforward symbolic modeling might be simpler for some cases.
- requires a good high performance library,
- additional programmer load for dealing with subsymbolic tensor operations.

** Fourier Holographic Reduced Representation (FHRR)

#+BEGIN_QUOTE
Holographic Reduced Representation: Distributed Representation for Cognitive Structures
#+END_QUOTE

Tony A. Plate 2003

This model uses complex phaser hypervectors.

[[file:src/benjamin_schwerdtner/clj_push3_play/hdc/fhrr.clj]]

*** Why

- Relatively easy to implement a resonator network with.
- supports /fractional power exponentiation/ (FPE) algorithm.
- Compares powerfully with other VSA's http://www.arxiv.org/abs/2001.11797.
- drawback 1: Storage need compared to block sparse VSA's.
- drawback 2: Bind is not self-inverse.

** Resonator Network

#+BEGIN_QUOTE
Resonator networks for factoring distributed representations of data structures.
#+END_QUOTE

Frady, Kent, Olshausen, Sommer 2020
Neural Computation 32, 2311-2331 (2020)

- https://arxiv.org/abs/2007.03748
- FHRR improvements from https://arxiv.org/abs/2208.12880v4

[[file:src/benjamin_schwerdtner/clj_push3_play/hdc/resonator.clj]]

*** The Problem

Factorize compound data structure representations in HDC/VSA.
Given a hdv resulting from previous binding operations, which are the seed hypervectors contributing to the binding?

*** Resonator Network Algorithm

The resonator combines computing in superposition and cleanup operations to search the 'factor space' in parallel.
It can be interpreted as a recurrent neuronal net with fixed point dynamics that are the solution to the factorization problem.

*** Example Usage

From tests:

#+BEGIN_SRC clojure
(require '[benjamin-schwerdtner.clj-push3-play.hdc.resonator :as resonator])
(require '[benjamin-schwerdtner.clj-push3-play.hdc.fhrr :as hd])

(require-python '[torch :as torch])

(def reference-impl resonator/exhaustive-search-factorize)

(let [books (torch/stack [(hd/seed 10) (hd/seed 10) (hd/seed 10)])
      [a b c] (mapv (fn [b] (py/get-item b (rand-int 10))) books)
      x (hd/bind [a b c])
      factors-ref (vec (reference-impl x books))
      factors (:factors (resonator/resonator-fhrr x books))]
  (t/is (torch/allclose (torch/stack factors-ref)
                        (torch/stack factors))
        (str "Factorizes")))
#+END_SRC

*** Why

- factorization (the flip side of binding) might prove to be a vital module for neurosymbolic systems.
- proven to be an efficient alg by the researchers.

**** Drawbacks:
- research topic to make work with Binary Sparse Block Codes (BSBC).
- ??

** Fractional Power Exponentiation (FPE), Spatial Semantic Pointer (SSP)

#+BEGIN_QUOTE
A neural representation of continuous space using fractional binding
#+END_QUOTE

Brent Komer, Terrence C. Stewart,
Aaron R. Voelker, and Chris Eliasmith. A neural representation of continuous space using fractional binding.
In Annual Meeting of the Cognitive Science Society, 2019.

- [[file:src/benjamin_schwerdtner/clj_push3_play/hdc/fractional_power_encoding.clj][FPE impl]]
- [[file:src/benjamin_schwerdtner/clj_push3_play/hdc/spatial_semantic_pointer.clj][SSP impl]]

** Conceptual Hyperspace (CH)

#+BEGIN_QUOTE
Analogical Reasoning Within a Conceptual Hyperspace
#+END_QUOTE

Howard Goldowsky, Vasanth Sarathy, 2024
https://arxiv.org/abs/2411.08684

[[file:src/benjamin_schwerdtner/clj_push3_play/hdc/conceptual_hyperspace.clj][conceptual_hyperspace.clj]]

- Encode low dimensional points from domain D (a *conceptual space*) in hypervectors using fractional power encoding (CH).
- Have a cognitive system that generates hdvs from perception or long term memory (skipped atm).
- Use HDC/VSA arithmetic to produce points in CH, e.g. analogy find.
- decode to D domain using a resonator network.

Concrete example:

#+begin_src clojure
  (require '[benjamin-schwerdtner.clj-push3-play.hdc.conceptual-hyperspace :as ch])
  (require '[[benjamin-schwerdtner.clj-push3-play.hdc.fhrr :as hd]])

  ;; ------------
  ;;
  ;; PURPLE : BLUE :: ORANGE : X
  ;;
  ;; find x.
  ;;
  (do
      (def p-purple [6.2 -6.2 5.3])
      (def p-blue [0 -10 5])
      (def p-orange [6.7 5.7 10])
      (def p-yellow  [0.6 1.8 9.7])
      (def B
        (ch/bases-codebooks
         {:high 10
          :k 3
          :low -10
          :resolution 0.1}))
      (let [[purple blue orange yellow]
            (mapv
             #(ch/encode-point % B)
             [p-purple p-blue p-orange p-yellow])
            x
            (ch/categorical-mapping purple blue orange)]
        [p-yellow
         (ch/decode x B)
         (py.. (hd/similarity x yellow) item)]))

  ;;
  ;; [[0.6 1.8 9.7]
  ;;  tensor([0.5000, 1.9000, 9.7000])   <-  outcome is not as close to yellow as it could be ?
  ;;  0.9674046635627747]
  ;;
  ;; ------------
  ;; 'yellow is to orange like blue is to purple'
#+end_src


* Ideas / want to do

- explore algs where the variation operator is itself evolved [[file:ideas/metaevolution.org]['metaevolution']].
  - split 'mutation' and 'world' genomes.
- explore symbiogenic algorithms.
- explore open ended problems and creativity (G. Chaitin's Metabiology but applied).
- Implement [[https://www.hd-computing.com/][HDC/VSA]] operators.
- Figure out a hyper dimensional representation of push code so that the same program can be target of
  symbolic and neural / subsymbolic algorithms.

* Development

** Run tests

The python path needs to be set, then run ~clj -X:test~.

#+BEGIN_SRC shell
./run.sh -X:test
#+END_SRC
